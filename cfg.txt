# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./customPackages/flatpack.nix
    ];


  virtualisation.docker.enable = true; 
  networking.firewall.allowedTCPPorts = [ 5001 8096 ];  
    
  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "America/Los_Angeles";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Enable the X11 windowing system.
  # You can disable this if you're only using the Wayland session.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.displayManager.sddm.enable = true;
  services.desktopManager.plasma6.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

  services.flatpak.enable = true;
  systemd.services.flatpak-repo = {
    wantedBy = [ "multi-user.target" ];
    path = [ pkgs.flatpak ];
    script = ''
      flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    '';
  };


  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.bepis = {
    isNormalUser = true;
    description = "bepis";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      kdePackages.kate
    #  thunderbird
    ];
  };

  # Enable automatic login for the user.
  services.displayManager.autoLogin.enable = true;
  services.displayManager.autoLogin.user = "bepis";

  services.jellyfin = {
    enable = true;
    openFirewall = true;
    user = "bepis";
  };

  # Install firefox.
  programs.firefox.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

   # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    git
    mesa
    gitRepo
    gnupg
    autoconf
    curl
    docker
    docker-client
    openscad
    (pkgs.callPackage /etc/nixos/customPackages/koboldcpp.nix {
	cublasSupport = true;
	vulkanSupport = false;
    })


    prismlauncher
	procps
	gnumake
	m4
	gperf
	unzip
	cudaPackages.cudatoolkit
	cudaPackages.nccl
	cudaPackages.cudnn
	cudaPackages.cutensor
	cudaPackages.libcublas
	cudaPackages.cuda_nvcc
	cudaPackages.libcusparse
	cudaPackages.libcusolver
	cudaPackages.cuda_cudart
	cudaPackages.cuda_opencl
        cudaPackages.libcublas
        cudaPackages.cuda_nvcc
        cudaPackages.cuda_cudart
        cudaPackages.cuda_cccl

	clblast
	libGLU libGL
	xorg.libXi
	xorg.libXmu
	freeglut
	xorg.libXext
	xorg.libX11
	xorg.libXv
	xorg.libXrandr
	zlib
	ncurses5
	stdenv.cc
	binutils
    micro
    ferium
    xclip
    tetris
    jellyfin
    jellyfin-web
    jellyfin-ffmpeg
    discord
    telegram-desktop
    fsearch
    jackett
    zerotierone
    libgcc
    cmake
    llama-cpp
    nix-ld
    uv
	
	
    
	# python
	python312
	python312Packages.torch
	python312Packages.transformers
	python312Packages.diffusers
	 
    # vulkan
    glfw
    freetype
    vulkan-headers
    vulkan-loader
    vulkan-validation-layers
    vulkan-tools
    shaderc
    renderdoc
    tracy
    vulkan-tools-lunarg
    

    xorg.libX11
    xorg.libXau
    xorg.libXdmcp
    xorg.libxcb
    xorg.libXext
    xorg.libXrender
    xorg.libXrandr
    xorg.libXfixes
    xorg.libXi
    xorg.libXcursor
    xorg.libXinerama
    xorg.libXdamage
    xorg.libxcb

   # vr
   v4l-utils 
   xrizer
   motoc
   libsurvive
   #wayvr-dashboard
   oscavmgr
   monado



   # (pkgs.stdenvNoCC.mkDerivation {
   #   pname = "koboldcppold";
   #   version = "1.98.1";
   #   src = pkgs.fetchurl {
   #     url = "https://github.com/LostRuins/koboldcpp/releases/download/v1.98.1/koboldcpp-linux-x64";
   #     sha256 = "sha256:9980b8c3447497939745991e1589bce07131fbf45952799c0b16158f9818fb70";
   #   };
   #   nativeBuildInputs = [ pkgs.autoPatchelfHook ];
   #   buildInputs = with pkgs; [
   #     glibc zlib zstd openssl libGL vulkan-loader
   #     cudatoolkit cudaPackages.cudnn
   #     alsa-lib pulseaudio xorg.libxcb
   #     xorg.libX11 xorg.libXau xorg.libXdmcp xorg.libxcb xorg.libXext xorg.libXrender xorg.libXrandr xorg.libXfixes xorg.libXi xorg.libXcursor xorg.libXinerama xorg.libXdamage
   #   ];
   #   dontUnpack = true;
   #   installPhase = ''
#mkdir -p $out/bin
#cp $src $out/bin/koboldcpp
#chmod +x $out/bin/koboldcpp
#      '';
#      meta = with pkgs.lib; {
#        description = "KoboldCpp precompiled binary (Linux x64, CUDA build)";
#        homepage = "https://github.com/LostRuins/koboldcpp/releases/tag/v1.98.1";
#        license = licenses.gpl3Plus;
#        platforms = [ "x86_64-linux" ];
#      };
#    })
];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).



  services.zerotierone = {
    enable = true;
    joinNetworks = [
     "1c33c1ced0f8cfb0"
    ];
  };

    virtualisation.oci-containers = {
    backend = "docker";

    containers."bambustudio" = {
      image      = "lscr.io/linuxserver/bambustudio:02.02.02";
      autoStart  = true;                           # equivalent to “docker-compose up -d”

      environment = {
        PUID       = "1000";
        PGID       = "1000";
        TZ         = "Etc/UTC";
        DARK_MODE  = "true";
      };

      volumes = [ "/home/bepis/Documents/bambustuff:/config" ];

      ports = [
        "3000:3000"
        "3001:3001"
      ];

      # Options that have no dedicated field in the module
      extraOptions = [
        "--shm-size" "1g"            # shm_size
      ];
    };
  };

  # cuda
  
  # vr

   services.monado = {
      enable = true;
      defaultRuntime = true; # Register as default OpenXR runtime
   };


nixpkgs.overlays = let
  nixpkgs-xr = import (builtins.fetchTarball
    "https://github.com/nix-community/nixpkgs-xr/archive/main.tar.gz");
  in [
    # Your monado override (keeps OpenCV off)
    (final: prev: {
      monado = prev.monado.overrideAttrs (old: {
        buildInputs = builtins.filter (x: x != prev.opencv) old.buildInputs;
        cmakeFlags = (old.cmakeFlags or []) ++ [ "-DBUILD_WITH_OPENCV=OFF" ];
      });
    })

    # XR overlay
    nixpkgs-xr.overlays.default
  ];
   systemd.user.services.monado.environment = {
    STEAMVR_LH_ENABLE = "1";
    XRT_COMPOSITOR_COMPUTE = "1";
   };


  programs.steam = {
    enable = true;
    remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
    dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
    gamescopeSession.enable = true;
    localNetworkGameTransfers.openFirewall = true; # Open ports in the firewall for Steam Local Network Game Transfers 
    extraCompatPackages = [ pkgs.proton-ge-bin ];
  };

  programs.appimage.enable = true;
  programs.appimage.binfmt = true;

  hardware.graphics = {
      enable = true;
      enable32Bit = true;
  };

  hardware.nvidia = {
      modesetting.enable = true;
      powerManagement.enable = false;
      powerManagement.finegrained = false;
      open = true;
      nvidiaSettings = true;
     package = config.boot.kernelPackages.nvidiaPackages.production.overrideAttrs {
        version = "580.76.05";
        src = pkgs.fetchurl {
          url = "https://us.download.nvidia.com/XFree86/Linux-x86_64/580.76.05/NVIDIA-Linux-x86_64-580.76.05.run";
          sha256 = "1zcpbp859h5whym0r54a3xrkqdl7z3py1hg8n8hv0c89nqvfd6r1";
        };
      };
  };

   
  xdg.portal.enable = true;
  xdg.portal.extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
  
  services.xserver.videoDrivers = [ "nvidia" ];
  



}
